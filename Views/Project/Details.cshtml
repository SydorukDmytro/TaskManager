@model ProjectDto
@using Microsoft.AspNetCore.Identity
@using TaskManager.dto
@inject UserManager<User> UserManager

@{
    ViewData["Title"] = "Деталі проєкту";
    var isAdmin = User.IsInRole("Admin");
    var userId = UserManager.GetUserId(User);
    var statuses = new[] { "ToDo", "InProgress", "Done" };
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            document.querySelectorAll(".task-column").forEach(column => {
                new Sortable(column, {
                    group: "tasks",
                    animation: 150,
                    swapThreshold: 0.65,
                    onEnd: evt => {
                        const taskId = evt.item.dataset.taskId;
                        const newStatus = evt.to.dataset.status;

                        fetch(`/Task/UpdateStatus/${taskId}?newStatus=${newStatus}`, { method: "POST" })
                            .then(res => {
                                if (!res.ok) alert("Помилка при оновленні статусу");
                            });
                    }
                });
            });
        });

        function toggleForm(status) {
            const form = document.getElementById(`form-${status}`);
            form.classList.toggle("d-none");
        }
    </script>
}

<style>
    .kanban-column {
        background: #2c2f36;
        border-radius: 1rem;
        padding: 1rem;
        min-height: 450px;
        box-shadow: 0 0 20px rgba(0,0,0,0.3);
        display: flex;
        flex-direction: column;
    }

    .kanban-header {
        font-weight: 700;
        font-size: 1.5rem;
        margin-bottom: 1rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        color: #00ffc8;
    }

    .task-column {
        flex-grow: 1;
        min-height: 350px;
        padding: 0.5rem;
        background: #292b33;
        border-radius: 0.5rem;
        overflow-y: auto;
    }

    .kanban-task {
        background: #1f2228;
        border-radius: 1rem;
        padding: 1rem;
        margin-bottom: 1rem;
        box-shadow: 0 0 10px rgba(0,0,0,0.2);
        transition: transform 0.2s ease-in-out;
        cursor: grab;
    }

        .kanban-task:hover {
            transform: scale(1.03);
        }

    .form-create-task input,
    .form-create-task textarea {
        background: #343a40;
        color: #fff;
        border: none;
        border-radius: 0.5rem;
        padding: 0.5rem;
    }

    .form-create-task button {
        margin-top: 0.5rem;
    }

    .project-card {
        background: linear-gradient(145deg, #2b2e34, #1c1f24);
        border-radius: 1rem;
        padding: 1.5rem;
        box-shadow: 0 0 20px rgba(0,0,0,0.4);
        margin-bottom: 3rem;
        color: #ddd;
    }

    .btn-glow {
        box-shadow: 0 0 10px rgba(0,255,200,0.6);
    }
</style>

<div class="container py-5 text-light">
    <header class="text-center mb-5">
        <h1 class="display-4 fw-bold">@Model.Title</h1>
        <p class="lead">Деталі проєкту та завдання</p>
        <a asp-action="Index" class="btn btn-outline-light btn-lg mt-2">⬅ Повернутись до списку</a>
    </header>

    <section class="project-card">
        <div>
            <h5 class="text-muted mb-3">
                Створено: @Model.CreatedAt | Автор: @Model.CreatedByUserName
            </h5>
            <p class="fs-5">@Model.Description</p>

            @if (Model.CreatedByUserId.ToString() == userId || isAdmin)
            {
                <div class="d-flex gap-3 mt-3">
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning btn-glow">
                        ✏️ Редагувати
                    </a>
                    <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger btn-glow">
                        🗑️ Видалити
                    </a>
                </div>
            }
        </div>
    </section>

    <section class="row gy-4">
        @foreach (var status in statuses)
        {
            <article class="col-lg-4 col-md-6">
                <div class="kanban-column">
                    <div class="kanban-header">
                        <span>@status</span>
                        <button class="btn btn-sm btn-success" type="button" onclick="toggleForm('@status')">➕</button>
                    </div>

                    <div class="task-column" data-status="@status">
                        @foreach (var task in Model.Tasks.Where(t => t.Status == status))
                        {
                            <div class="kanban-task" data-task-id="@task.Id" tabindex="0" role="listitem" aria-label="@task.Title">
                                <div class="d-flex justify-content-between mb-2 align-items-center">
                                    <h5 class="mb-0">@task.Title</h5>
                                    <div>
                                        <a asp-controller="Task" asp-action="Edit" asp-route-id="@task.Id" class="btn btn-sm btn-outline-warning me-1" title="Редагувати задачу">✏</a>
                                        <form asp-controller="Task" asp-action="Delete" asp-route-id="@task.Id" method="post" class="d-inline">
                                            <button type="submit" class="btn btn-sm btn-outline-danger" title="Видалити задачу">🗑</button>
                                        </form>
                                    </div>
                                </div>
                                <p>@task.Description</p>
                                <small class="text-muted">
                                    Термін: @(task.DueDate?.ToString("dd.MM.yyyy") ?? "Не вказано")<br />
                                    Виконавець: @task.AssignedUserName
                                </small>
                                <div id="comments-container-@task.Id" class="task-comments mt-3">
                                    @await Component.InvokeAsync("Comments", new { taskId = task.Id })
                                </div>

                                <!-- Форма для додавання коментарів -->
                                <form id="comment-form-@task.Id" class="mt-2">
                                    <input type="hidden" name="taskId" value="@task.Id" />
                                    <textarea name="content" class="form-control mb-2" placeholder="Додати коментар..." required></textarea>
                                    <button type="submit" class="btn btn-sm btn-primary">Додати</button>
                                </form>
                            </div>
                        }
                    </div>

                    <div id="form-@status" class="form-create-task mt-3 d-none">
                        <form asp-controller="Task" asp-action="CreateInColumn" method="post">
                            <input type="hidden" name="ProjectId" value="@Model.Id" />
                            <input type="hidden" name="Status" value="@status" />
                            <input type="hidden" name="CreatedByUserId" value="@userId" />
                            <input type="hidden" name="AssignedUserId" value="@userId" />
                            <input type="text" name="Title" class="form-control" placeholder="Назва задачі" required autocomplete="off" />
                            <textarea name="Description" class="form-control mt-2" placeholder="Опис" rows="3"></textarea>
                            <button type="submit" class="btn btn-sm btn-primary w-100 mt-2">✅ Створити</button>
                        </form>
                    </div>
                </div>
            </article>
        }
    </section>
</div>

<script>
    document.querySelectorAll('form[id^="comment-form-"]').forEach(form => {
        form.addEventListener('submit', async function (e) {
            e.preventDefault();

            const formData = new FormData(form);
            const taskId = formData.get('taskId');

            const response = await fetch('@Url.Action("AddComment", "Comment")', {
                method: 'POST',
                body: new URLSearchParams(formData),
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            });

            if (response.ok) {
                const html = await response.text();
                document.getElementById('comments-container-' + taskId).innerHTML = html;
                form.reset();
            } else {
                alert('Помилка при додаванні коментаря');
            }
        });
    });
</script>

